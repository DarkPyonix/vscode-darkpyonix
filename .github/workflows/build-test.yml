# This yml is used for PRs, pre-release, and release build.
# We use the github.event_name to determine what started the workflow to determine which
# situation we are in.

name: Build and Test

permissions: {}

on:
  pull_request:
    branches:
      - main
      - 'release'
      - 'release/*'
      - 'release-*'
  check_run:
    types: [rerequested, requested_action]
  push:
    branches:
      - main
      - 'release'
      - 'release/*'
      - 'release-*'
  schedule:
    - cron: '0 9 * * 1-5' # 9am UTC, Monday-Friday (2am PDT, after VS Code pre-release builds which is 11pm PDT)
  workflow_dispatch:

env:
  NODE_VERSION: 20.17.0
  NPM_VERSION: 10.8.2
  PYTHON_VERSION: 3.8
  DENO_VERSION: '~1.37'
  MOCHA_REPORTER_JUNIT: true # Use the mocha-multi-reporters and send output to both console (spec) and JUnit (mocha-junit-reporter). Also enables a reporter which exits the process running the tests if it haven't already.
  CACHE_NPM_DEPS: cache-npm
  CACHE_OUT_DIRECTORY: cache-out-directory
  CACHE_PIP_DEPS: cache-pip
  VSC_JUPYTER_FORCE_LOGGING: 'true'
  VSC_PYTHON_FORCE_LOGGING: 'true'
  VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 'true'
  # Key for the cache created at the end of the the 'Cache ./pythonFiles/lib/python' step.
  CACHE_PYTHONFILES: cache-pvsc-pythonFiles
  TEST_RESULTS_DIRECTORY: .
  TEST_RESULTS_GLOB: '**/test-results*.xml'
  IPYWIDGET_SCREENSHOT_PATH: '*-screenshot.png'
  DISABLE_INSIDERS_EXTENSION: 1 # Disable prompts to install pre-release in tests (else it blocks activation of extension).
  VSC_JUPYTER_INSTRUMENT_CODE_FOR_COVERAGE: true
  VSC_JUPYTER_LOG_KERNEL_OUTPUT: true

jobs:
  # Make sure to cancel previous runs on a push
  cancel_previous_runs:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@85880fa0301c86cca9da44039ee3bb12d3bedbfa # 0.12.1
        with:
          access_token: ${{ github.token }}

  build-vsix:
    name: Build VSIX
    runs-on: ubuntu-latest
    if: github.repository == 'microsoft/vscode-jupyter'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Use Npm ${{env.NPM_VERSION}}
        run: npm i -g npm@${{env.NPM_VERSION}}

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.PYTHON_VERSION}}

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm i -g @vscode/vsce

      - name: Build VSIX
        uses: ./.github/actions/build-vsix
        id: build-vsix

      - uses: actions/upload-artifact@v4
        with:
          name: 'ms-toolsai-jupyter-insiders.vsix'
          path: 'ms-toolsai-jupyter-insiders.vsix'

  smoke-tests:
    timeout-minutes: 30
    name: Smoke tests
    # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
    runs-on: ${{ matrix.os }}
    if: github.repository == 'microsoft/vscode-jupyter'
    needs: [build-vsix]
    env:
      VSIX_NAME: 'ms-toolsai-jupyter-insiders.vsix'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v5
        id: setupPythonVersion
        with:
          python-version: ${{matrix.python}}

      - name: Set CI Path
        shell: bash
        run: echo "CI_PYTHON_PATH=${{ steps.setupPythonVersion.outputs.python-path }}" >> $GITHUB_ENV

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Use Npm ${{env.NPM_VERSION}}
        run: npm i -g npm@${{env.NPM_VERSION}}

      - name: Download VSIX
        uses: actions/download-artifact@v4
        with:
          name: 'ms-toolsai-jupyter-insiders.vsix'

      # This is faster than running `npm ci`, we do not want to build zmq, etc.
      # Let that happen in other jobs, this job needs to be fast
      - name: npm ci
        run: npm ci --ignore-scripts --prefer-offline --no-audit

      # Run again, as the download of zmq binaries could have failed with 403 errors
      - run: npm run postinstall
        env:
          GITHUB_TOKEN: ${{ github.token }}
        shell: bash

      - name: pip install system test requirements
        run: |
          python -m pip install --upgrade -r build/venv-smoke-test-requirements.txt
        shell: bash

      # Compile the test files.
      - name: Prepare for smoke tests
        run: npx tsc -p ./
        shell: bash

      - name: Run desktop smoke tests
        env:
          DISPLAY: 10
          VSC_JUPYTER_FORCE_LOGGING: 1
          VSC_JUPYTER_CI_TEST_VSC_CHANNEL: 'dac0c97d082bd3bf38fdb3251e955e25c7c992a0'
        uses: GabrielBB/xvfb-action@b706e4e27b14669b486812790492dc50ca16b465 # v1.7
        with:
          run: npm run testSmokeLogged
